MTD Subsystem
09:53 11 Sep 2018
Tags: flash, linux, kernel

* introduction

MTD(Memory Technology Device)即内存技术设备,在Linux内核中,
引入MTD层为NOR FLASH和NAND FLASH设备提供统一接口.
MTD将文件系统与底层FLASH存储器进行了隔离.

.image skeleton.jpg

其中 :

- Flash硬件驱动层 : Flash硬件驱动层负责对Flash硬件的读,写和擦除操作.MTD设备的Nand Flash芯片的驱动则drivers/mtd/nand/子目录下,Nor Flash芯片驱动位于drivers/mtd/chips/子目录下.
- MTD原始设备层 : 用于描述MTD原始设备的数据结构是mtd_info,它定义了大量的关于MTD的数据和操作函数.其中mtdcore.c MTD原始设备接口相关实现,mtdpart.c: MTD分区接口相关实现.
- MTD设备层: 基于MTD原始设备,linux系统可以定义出MTD的块设备(主设备号31)和字符设备(设备号90).其中mtdchar.c :  MTD字符设备接口相关实现,mtdblock.c : MTD块设备接口相关实现.

* Data Structure

** mtd_info

mtd_info用于抽象mtd原始设备 , 其定义如下 :

.code code /mtd_info_s OMIT/,/mtd_info_e OMIT

所有的mtd_info都通过 `add_mtd_device` 和 `del_mtd_device` 接口向系统添加和删除 . 
所有的mtd_info都通过 `index` 作为id在全局的 `mtd_idr` 中进行查找 . 

** mtd_part

如果一个mtd设备下挂载多个分区 , 每个分区由 `mtd_part` 进行抽象 , 其定义如下 :

.code code /mtd_part_s OMIT/,/mtd_part_e OMIT

其实每个分区也是一个 `mtd_info` , 而所有的分区都被挂在全局的 `mtd_partitions`
双向链表中 .
同时 , 为了表示设备和其下的分区 , 用于表示整个设备的 `mtd_info` 称为master , 
而表示该设备下分区的 `mtd_info` 称为slave ,
可以看到每个slave都有一个master指针 , 用于标示它所属的master设备 .

所有的分区都通过 `mtd_add_partition` 和 `mtd_del_partition` 接口向系统添加和删除 .

* mtd char

drivers/mtd/mtdchar.c文件实现了MTD字符设备接口,通过它,可以直接访问Flash设备,
通过file_operations结构体里面的open()、read()、write()、ioctl()可以读写Flash,
通过一系列IOCTL 命令可以获取Flash 设备信息、擦除Flash、读写NAND 的OOB、获取OOB layout 及检查NAND 坏块等(MEMGETINFO、MEMERASE、MEMREADOOB、MEMWRITEOOB、MEMGETBADBLOCK IOCRL)

* mtd block
drivers/mtd/mtdblock.c文件实现了MTD块设备接口,主要原理是将Flash的erase block 
中的数据在内存中建立映射,然后对其进行修改,最后擦除Flash 上的block,
将内存中的映射块写入Flash 块.整个过程被称为read/modify/erase/rewrite 周期.
但是,这样做是不安全的,当下列操作序列发生时,read/modify/erase/poweroff,就会丢失这个block 块的数据.

* flash driver

Linux内核在MTD层下实现了通用的NAND驱动(driver/mtd/nand/nand_base.c),
因此芯片级的NAND驱动不再需要实现mtd_info结构体中的read()、write()、read_oob()、write_oob()等成员函数.

MTD使用nand_chip来表示一个NAND FLASH芯片, 该结构体包含了关于Nand Flash的地址信息,读写方法,ECC模式,硬件控制等一系列底层机制.

其结构如下 :

.code code /nand_chip_s OMIT/,/nand_chip_e OMIT

** initialization

flash驱动的初始化 , 主要分为两个阶段 ,
第一个阶段主要用于探测颗粒 , 确定其型号 , block大小 , 页大小等一些基本信息 ,
该阶段主要由 `nand_scan_ident` 接口实现 . 

第二阶段主要是初始化一些驱动未定义的操作函数 (read_page, write_page等) ,
同时扫描并初始化坏块表 , 该阶段主要由 `nand_scan_tail` 接口实现 . 

*** nand_scan_ident

为了确定flash颗粒的型号 , 首先会读取该颗粒的id信息(总共8个字节) , 

.code code /read_id_s OMIT/,/read_id_e OMIT

接着 , 会在驱动支持的颗粒列表中查找 , 每个表项包含如下信息 :

.code code /nand_flash_dev_s OMIT/,/nand_flash_dev_e OMIT

当然 , 如果驱动程序不指定其支持的颗粒列表 , 那么会从kernel默认支持的列表(
`nand_flash_ids` )中查找 : 

.code code /find_id_s OMIT/,/find_id_e OMIT

如果成功找到对应的颗粒信息 , 则会初始化chip中的相关字段

*** nand_scan_tail

如果第一阶段成功 , 则会进入第二阶段 .
首先 , 会检查驱动是否初始化用于ecc计算和数据缓存的buffer ,
如果没有 , 这里会申请对应大小的buffer :

.code code /check_buff_s OMIT/,/check_buff_e OMIT

之后 ,如果驱动没有指定ecc的布局信息 , 这里会使用默认的布局信息 :

.code code /check_ecc_layout_s OMIT/,/check_ecc_layout_e OMIT

接着 , 根据ecc模式初始化未定义的函数操作指针 :

.code code /check_function_pointers_s OMIT/,/check_function_pointers_e OMIT

之后还会初始化一些 `mtd_info` 操作函数 , 以及ecc信息 :

.code code /mtd_remain_ecc_s OMIT/,/mtd_remain_ecc_e OMIT

最后 , 如果驱动没有指定跳过坏块表扫描 , 则会扫描这个颗粒 , 建立坏块表 :

.code code /check_scan_bbt_s OMIT/,/check_scan_bbt_e OMIT

*** scan_bbt

坏块表保存在 `nand_chip` 的bbt字段中 , 其中 , 每个block的状态由2个bit表示 :

.code code /bbt_flag_s OMIT/,/bbt_flag_e OMIT

如果一个block是坏块 , 会由一个坏块标记来标示 , 该标记一般每个block中第一个
(或最后一个)page的oob区域中 , 在软件层面是使用 `nand_bbt_descr` 来描述 :

.code code /nand_bbt_descr_s OMIT/,/nand_bbt_descr_e OMIT

由于坏块表的建立需要扫描整个flash颗粒 , 为了加快该过程 ,
软件可以将之前建立的坏块表存在flash中的固定位置 , 这样 , 
下次扫描的时候就可以直接使用上次保存的坏块信息 , 这样就避免了
每次都扫描整个颗粒 . 这里我们暂且不考虑这个情况 , 默认每次都扫描整个可以.

下面我们来看默认的坏块扫描函数(nand_default_bbt).
首先 , 初始化bbt :

.code code /alloc_bbt_s OMIT/,/alloc_bbt_e OMIT

可以看到 , 这里默认所有的block都是好块 . 
之后便是扫描整个所有的block的坏块标记 , 如果存在则将对应的标记位置为
`BBT_BLOCK_FACTORY_BAD`

.code code /scan_bb_s OMIT/,/scan_bb_e OMIT

** read operation

flash驱动层对于read_page和read_oob封住了对应的接口, 分别为 `nand_read` 和
`nand_read_oob` , 下面我们来看下这两个接口 . 

首先 , 不管是对于read还是write , flash驱动层都需要相关操作的具体信息 , 
包括从哪个位置read/write多少内容到哪里 , 这些信息都被封装到 `mtd_oob_ops`
结构体中 :

.code code /mtd_oob_ops_s OMIT/,/mtd_oob_ops_e OMIT

当然 , 为了考虑接口在多线程坏境下的使用, 每次read/write操作之前都会同步
颗粒的状态 , 只有在ready状态下，才会进行后续的操作 , 否则一直等待其状态变为ready
这部分工作在 `nand_get_device` 接口中实现 :

.code code /nand_get_device_s OMIT/,/nand_get_device_e OMIT

当本次操作结束时 , 会调用 `nand_release_device` 将颗粒状态置为ready :

.code code /nand_release_device_s OMIT/,/nand_release_device_e OMIT

*** nand_read_oob

read oob数据时会有三种操作模式 :

.code code /oob_mode_s OMIT/,/oob_mode_e OMIT

最终会根据不同的模式 , 选择对应的驱动实现的read oob接口 :

.code code /read_oob_s OMIT/,/read_oob_e OMIT

这里需要注意 , read_oob/read_oob_raw接口只是将oob的数据读到 `chip->oob_poi`
这个内部的buffer中 , 之后需要根据具体的mode ,
将其中的数据copy到调用者提供的buffer中 , 
这部分工作由 `nand_transfer_oob` 完成 :

.code code /nand_transfer_oob_s OMIT/,/nand_transfer_oob_e OMIT

*** nand_read

当读取flash中数据取得内容时 , 考虑到性能的因素 , 驱动内部会缓存当前
页的数据在 `chip->buffers->databuf` 中 , 如果当前读取的内容和之前的
读取的内容在同一页内 , 那么直接从当前缓存的buffer中直接copy :

.code code /nand_read_ops_copy_s OMIT/,/nand_read_ops_copy_e OMIT

否则 , 就需要根据mode选择不同的驱动接口将数据读取到内部buffer中 :

.code code /nand_read_ops_s OMIT/,/nand_read_ops_e OMIT

** write operation

write操作的逻辑和read类似 , 这里就不在赘述 .
这里有一点需要注意 , 但写入的内容不满一页时 , 
驱动实际还是写入一页数据 , 只不过未改变的部分会用0xff填充 , 
这样当硬件将0xff写入到对应颗粒中时 , 并不会改变其之前的内容 . 

FIN.
