Linux kernel boot process - part 1
10:00 23 Feb 2017
Tags: linux, kernel

* 概述

这里主要针x86_64平台进行分析 , 
kernel的启动过程主要经历这样几个阶段 : 
real mode -> protect mode -> long mode
下面结合4.10的kernel代码进行分析 . 

* real mode

在real mode下 , 地址总线共20位， 所以其最大可访问的内存大小为1Mb . 
在pc上电之后 , 第一条指令的地址位 0xffff * 16 + 0xfff0 , 也就是0xfffffff0 .
一般来说 , 该指令指向bios的启动代码 ,
紧接着bios会查找启动分区 , 而启动分区的标志是其最后2个字节为 0x55aa ,
如果发现了该启动分区 , bios会将该分区拷贝到物理地址位0x7c00的位置 , 
拷贝大小为512字节 ( 即一个分区的大小 ) , 最后将跳转到0x7c00 ,
从而将控制权交给启动分区代码 . 

** boot sector

kernel本身并不支持自启动 , 而必须通过bootloader进行加载 , 
常见的bootloader包括grub , syslinux等等 . 
所以一般放在启动分区的是bootloader的启动代码 , 
而如果kernel被放在了启动分区 , 
通常情况下 , 我们会在屏幕上看到如下信息 : 

.code corpus /bootsec_info_start OMIT/,/bootsec_info_end OMIT

其实这里是kernel的启动分区代码打印出来的 , 
我们可以从kernel的setup的链接脚本看出 : 

.code corpus /bootsec_ld_s OMIT/,/bootsec_ld_e OMIT

下面我们来看看启动分区的代码 . 
首先是初始化相关段寄存器， 同时关闭中断

.code corpus /bootsec_code_1_s OMIT/,/bootsec_code_1_e OMIT

接着 , 通过bios提供的[[http://www.ctyme.com/intr/rb-0106.htm][0x10]]中断
将每个字符显示在屏幕 , 也就是我们看到的 : 

.code corpus /bootsec_code_2_s OMIT/,/bootsec_code_2_e OMIT

最后 , 使用bios[[http://www.ctyme.com/intr/rb-1754.htm][0x16]]中断
接收用户的按键 , 
然后调用[[http://www.ctyme.com/intr/int-19.htm][0x19]]中断进行重启 . 
一般情况下 , 这是pc会重新进行启动 , 为了防止0x19中断失败 , 
最后强制调转到 0xfffffff0 , 也就时bios的第一条指令所在的位置.

.code corpus /bootsec_code_3_s OMIT/,/bootsec_code_3_e OMIT

** kernel header

真正的入口是 `_start` , 而它只是一个调转指令 : 

.code corpus /entry_code_1_s OMIT/,/entry_code_1_e OMIT

为什么这里又是一个调转呢 , 其实该位置是位于kernel header中 , 
kernel header是kernel在x86平台与bootloader进行信息交互的一种方式 , 
kernel会在该头部中写入一些信息供bootloader加载时使用 , 
例如kernel希望bootloader将其加载到什么位置 , kernel的版本信息， 等等 . 
bootloader同样会将加载的相关信息写入到该头部中 , 
提供给kernel在执行时使用 . 
该头部的相关介绍可以参考kernel document ( Documentation/x86/boot.txt ) 
而这里的调转 , 正是跳过该头部 , 来到真正的setup代码 ： 

.code corpus /entry_code_2_s OMIT/,/entry_code_2_e OMIT

这里首先使es段寄存器和数据段寄存器ds一致 , 
随后清除direction标记.

** setup stack

为了尽快进入c代码 , 需要将stack建立好 , 这里会根据ss段寄存器的值进行不同处理 : 

.code corpus /entry_code_3_s OMIT/,/entry_code_3_e OMIT

如果ss与ds一致 , 那么使用当前的ss与sp寄存 ,
这里还会将sp进行4字节对其 , 如果其太小那么使用 0xfffc作为sp的值 . 

如果ss与ds不一致 , 那么我们认为sp的值是非法的 : 

.code corpus /entry_code_4_s OMIT/,/entry_code_4_e OMIT

这里还会根据是否使用heap来调整stack的位置 , 
对于heap的使用是根据header中的loadflags来区分的 : 

.code corpus /loadflags_s OMIT/,/loadflags_e OMIT

最终 , stack可能的位置有如下三种 : 

1. ss与ds一致 : 

.code corpus /stack_1_s OMIT/,/stack_1_e OMIT

2. ss与ds不一致 , 不使用heap :

.code corpus /stack_2_s OMIT/,/stack_2_e OMIT

3. ss与ds不一致 , 使用heap :

.code corpus /stack_3_s OMIT/,/stack_3_e OMIT


** setup

stack建立好之后 , 下面是统一cs和ds的段寄存器 : 

.code corpus /entry_code_5_s OMIT/,/entry_code_5_e OMIT

接着检查setup尾部的标记 : 

.code corpus /entry_code_6_s OMIT/,/entry_code_6_e OMIT

然后将bss段清0 : 

.code corpus /entry_code_7_s OMIT/,/entry_code_7_e OMIT

最后就可以进入c代码了 : 

.code corpus /entry_code_8_s OMIT/,/entry_code_8_e OMIT

进入c代码之后 , 首先是将kernel保存到内部的数据结构中 : 

.code corpus /c_1_s OMIT/,/c_1_e OMIT

接着会初始化console和heap , 接着会检测cpu状态 , 检测内存以及设置video mode
等等 . 

这里我们来看看heap相关的操作 , 首先是heap的初始化 : 

.code corpus /c_2_s OMIT/,/c_2_e OMIT

其中 `HEAP` 指向开始 , 而 `heap_end` 指向结束 , 
为了防止与stack溢出 , 这里 `heap_end` 最大指向stack的结束位置 . 

同时 , 这里还提供了3个接口 , 一个用于查看当前heap是否有足够的指定的空间大小： 

.code corpus /c_3_s OMIT/,/c_3_e OMIT

一个用于从heap分配申请的大小 : 

.code corpus /c_4_s OMIT/,/c_4_e OMIT

还有一个用于释放当前heap上所有分配的空间 : 

.code corpus /c_5_s OMIT/,/c_5_e OMIT

有了以上三个接口 , 一般的用法为 : 

.code corpus /c_6_s OMIT/,/c_6_e OMIT

接着kernel会设置一个空的idt以及一个包含寻址空间为0-4Gb的代码段和数据段的gdt ,

最终调用 `protected_mode_jump` 完成从real mode到protect mode的跳转 . 

.code corpus /c_7_s OMIT/,/c_7_e OMIT

该函数接受两个参数 : 

1. entrypoint(32bit): protect mode的首个指令的物理地址 ,
这里由bootloader指定 , 它保存在kernel header中 , 该参数保存在eax寄存器中 . 

2. bootparams(32bit): 保存启动参数的数据结构的物理地址 , 
该参数保存在edx寄存器中 . 

进入 `protected_mode_jump` 后 , 首先将启动的相关信息保存在esi寄存器中 , 
因为edx寄存器后面会被用到 . 

.code corpus /pm_1_s OMIT/,/pm_1_e OMIT

接着调整label 2处的地址 : 

.code corpus /pm_2_s OMIT/,/pm_2_e OMIT

label 2处最开始保存的是进入protect mode的首个指令的偏移 , 
这里加上cs段基地址就变成了其真实的物理地址 , 
这样就为后面的调转做好了准备 . 

接着 , 将ds段和tss段选择符分别保存在cx和di寄存器中 : 

.code corpus /pm_3_s OMIT/,/pm_3_e OMIT

然后就是打开cr0寄存器中的protect mode使能位 : 

.code corpus /pm_4_s OMIT/,/pm_4_e OMIT

最终 , 通过长调转进入protect mode : 

.code corpus /pm_5_s OMIT/,/pm_5_e OMIT

进入protect mode之后 , 首先便是重新设置各个段寄存器 , 同时调整esp寄存器 : 

.code corpus /pm_6_s OMIT/,/pm_6_e OMIT

接着 , 将相关通用寄存器清0 : 

.code corpus /pm_7_s OMIT/,/pm_7_e OMIT

最后 , 跳转到kernel protect mode的首个指令 , 该地址保存在eax中 : 

.code corpus /pm_8_s OMIT/,/pm_8_e OMIT

FIN.
