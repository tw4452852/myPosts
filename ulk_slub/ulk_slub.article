Memory Area Management - The Slub Allocator
13:00 16 Oct 2014
Tags: linux, kernel

* 基本概念

在深入介绍 `slub` 之前,我们首先需要了解其中的几个基本概念.

** kmem_cache_cpu

由于cpu cache 本地性的影响,当申请的资源都在cpu本地的cache中,
memory的读写效率会很高,这里 `slub` 抽象出了这个概念,在代码中
用 `kmem_cache_cpu` 表示:

.code slub_def.h 40,48

这里需要介绍下一个 `slab` 中的 `objects` 是如何组织的:

.image obj.png

可以看出每个 `object` 末尾都有个指针,指向下一个 `object`.

还有一点需要注意的是,这里的 `slab` 其实是用 `page` 结构来组织的,
我们来看page结构体中相关的字段:

.code slub_def.h 59,103

** kmem_cache_node

为了支持[[https://en.wikipedia.org/wiki/Non-uniform_memory_access][NUMA]],
`slub` 对于每个内存节点,抽象出了 `kmem_cache_node` 与之对应:

.code slab.h 275,288

可以看出这里只维护了部分空闲以及非空闲的 `slabs` .

** kmem_cache

`kmem_cache` 是从[[/posts/Memory_Area_Management_-_The_Slab_Allocator][slab]]
中引入的概念,我们来看 `slub` 是如何实现它的:

.code slub_def.h 107,129

下面我们结合申请和释放的流程来熟悉整个 `slub` 对内存的管理.

* 申请

首先尝试在本地cpu中寻找可用的空闲的 `object`,
当然,在这之前需要确定当前的 `cpu`,
以及当前的操作 `id`, 该 `id` 对于每个 `cpu` 是唯一的:

.code slub.c 2420,2423

确定了 `cpu`, 下面便是查看它上面是否有空闲的 `object`

.code slub.c 2425,2426

如果有的话,更新下一个空闲的 `object` 指针以及全局的操作 `id` :

.code slub.c 2431,2440

如果当前 `cpu` 没有空闲的 `object`, 或者 `object` 所属的物理页和
要求的 `NUMA` 节点不同,那么我们需要从其他 `NUMA` 节点申请(也就是所谓的慢路).
当然, 如果其他节点也没有满足条件的空闲的 `object`,
那么我们就需要申请新的 `slab` 了.

.code slub.c 2427,2428

进入慢路之后,首先会关中断,
之后为了防止在关中断的过程中被重新调度需要重新读取该 `cpu` 上的
空闲的 `object` `list` ,因为可能在这过程中,别的线程恰巧释放了一些空闲的
`object`, 如果有空闲的 `object` ,我们就可以直接从其中获取.
反之,我们就需要获得新的 `slab`.

.code slub.c 2322,2348

** deactive a slab

当然,如果当前 `slab` 所属的 `NUMA` `node` 和要求的不一致,
我们同样需要获得新的 `slab` ,不过在这之前,需要将当前的 `slab` `deactive`
掉.这里的 `deactive` 其实是将该 `slab` 从本地 `cpu` 转移到其所属的 `NUMA`
`node` 上.

.code slub.c 2301,2307

下面我们来看下 `deactive` 的过程,首先将 `cpu` 本地的空闲的 `objects`
归还给 `page`, 最终,只有一个空闲的 `object` 保留在 `cpu` 本地.

.code slub.c 1827,1845

下面我们需要将最后一个 `object` 归还,
这里为什么没有在上一步做这件事,原因在于,我们还需要将 `page` `unfrozen`
同时将该 `page` 挂入到合适的链表.

所以,这里的第一件是决定最终的 `page` 的状态:

.code slub.c 1863,1876

这里需要注意的是,当 `page` 被归还给 `NUMA` `node` 后,其状态变成了 `unfrozen`.

下面便是选择一个合适的链表将其挂入.
首先,如果该 `page` 里没有正在使用的 `object` 同时 `NUMA` `node` 上空闲的
`pages` 的个数大于我们设定的阈值,我们选择将该 `page` 直接释放给 `zone` `page`
`alloctor`

.code slub.c 1878,1879

否则,将其挂入到 `NUMA` `node` 的 `partial` 链表上.

.code slub.c 1880,1881

** get a slab

好了,下面我们来看下如何得到一个 `slab` .

这里,我们首先从 `cpu` 本地获取一个部分空闲的 `slab` :

.code slub.c 2352,2358

如果 `cpu` 本地没有可用的 `slab` , 那么我们尝试从指定的 `NUMA` `node` 上获取一个部分空闲的 `slab` .

.code slub.c 2194,2197

.code slub.c 1621,1646

其中, `acquire_slab` 主要是将 `page` 从 `NUMA` `node` 链表中删除,
同时讲其置为 `frozen` 状态.

.code slub.c 1585,1593

之后将第一个得到的 `page` 设置为 `cpu` 当前正在使用的 `slab`,
其他的 `page` 则挂入到 `cpu` 本地的 `partial` `list` 链表中.

如果没有部分空闲的 `slab` ,那么我们只能想 `zone` `page` `alloctor`
申请新的 `slab` ,同时将新的 `slab` 直接于本地 `cpu` 进行绑定.

.code slub.c 2199,2214

当得到新的 `slab` ,下面便可以直接从其获得空闲的 `object` 返回.

至此申请的流程结束,我们可以将整个的申请流程总结成以下步骤:

- 尝试从本地 `cpu` 的空闲的 `object` 链表获得空闲的 `object` ,如果成功则直接返回.
- 尝试从对应的 `NUMA` `node` 上获得空闲的 `slab` ,这里的获取 `slab` 会优先从 `cpu` 本地的 `partial` `list` 上,然后才是对应的节点的 `partial` `list` ,当获得 了一个 `slab` ,返回步骤一.
- 尝试从 `zone` `page` `allocator` 分配一个新的 `slab` ,成功则返回步骤一.

* 释放

释放的流程和申请类似,如果需要释放的 `object` 所属的 `slab`
与当前本地 `cpu` 上的 `slab` 一致,我们直接将其挂入到其空闲链表中:

.code slub.c 2661,2672

否则,我们选择将 `object` 释放给其对应的 `slab`,
这里主要是将其挂入 `slab` 的 `freelist` 中,
同时更新相应的计数.

.code slub.c 2537,2542

之后,如果该 `slab` 之前不在任何链表上,那么我们首先会将其挂入到
当前 `cpu` 本地的 `partial` `list` 上:

.code slub.c 2582,2584

反之,如果该 `slab` 所属的 `NUMA` `node` 上的部分空闲的 `slab` 过多,
同时该 `slab` 完全空闲,我们选择直接将其释放给 `zone` `page` `allocator` .

.code slub.c 2595,2596

否则,我们将其放入对应节点的 `partial` `list` 中.

.code slub.c 2602,2607

我们先来看如何将其放入 `cpu` 本地,如果之前该 `cpu` 已经有了很多的 `objects`,
那么,我们需要将部分 `slab` 释放掉.

.code slub.c 2031,2050

否则挂入到 `cpu` 本地的 `partial` `list`:

.code slub.c 2052,2060

好了,下面我来看下如果释放一个空闲的 `slab` 给 `zone` `page` `allocator` ,
首先,我们需要将其从相应的链表中删除:

.code slub.c 2612,2621

之后我们就可以将该 `slab` 安全的释放了.

好了,我们可以总结下释放的流程:

- 尝试将 `object` 放入到 `cpu` 本地的空闲链表,如果成功则直接返回.
- 将 `object` 释放给其对应的 `slab` ,然后优先将 `slab` 释放给本地 `cpu` ,如果本地 `cpu` 上有过多的 `slab` ，将一部分 `slab` 直接放回给 `zone` `page` `allocator` .
- 如果不能将 `slab` 返回给本地 `cpu` ，我们将其释放给对应的 `NUMA` `node` ，如果对应的节点上有过多的 `slab` ，返回给 `zone` `page` `allocator` .

FIN.
