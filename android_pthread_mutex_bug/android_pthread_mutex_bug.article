A bug related with Android pthread mutex
14:00 14 Sep 2016
Tags: android pthread

* 概述

这几天在调试一个android系统启动的问题, 现象是系统在启动过程中会hang住,
最终发现根本原因是因为等待在一个mutex上, 这里将分析过程记录下来.

* 分析过程

由于android系统中的关键服务hang住, 系统watchdog会将所有进程的stack dump出来,
( 结果保存在/data/anr/traces.txt )所以首先分析这些stack, 查看系统哪个服务hang住.

** hanged service

首先根据文件开头, 可以确定是system_server服务hang住了. 查看其主线程的stack:
查看其主线程的stack:

.code traces.txt 56,74

看来它在等待一个lock, 而它被thread 12拿住, 再来看thread 12的stack:

.code traces.txt 260,276

同样等待一个lock, 它由thread 63那住 , 在看看thread 63的stack :

.code traces.txt 1356,1391

可以看出 , 这里thread 63在等待一个binder的回应 , 通过stack可以看出该binder
是要创建一个surface , 在android系统中surface的创建都是统一由surfaceflinger
服务创建的，所以该binder是在等待surfaceflinger创建surface的结果 .
那么我们来看看surfaceflinger服务这时在做什么 .

首先来看看surfaceflinger进程中处理该binder请求的thread的stack :

.code traces.txt 1649,1663

这里是在等待一个信号量 , 这个信号量又是做什么的呢 ?
是这样的，binder处理thread收到一个请求后 ( 这里就是创建surface的请求 )
会将该请求转发给surfaceflinger主线程去处理 , 当主线程处理结束 ,
会将处理结果返回给binder处理线程 , 而binder处理线程再将结果转发给请求者 .
所以，这里其实是在等待主线程的处理结果 . 那么我们来看看主线程的stack :

.code traces.txt 1528,1550

原来主线程在做合成操作时等待一个mutex , 那么这个mutex被谁拿着呢 ?
另外 , 通过查看surfaceflinger的其他线程 , 发现其中这个thread很奇怪 ,
它也在等待同一个mutex :

.code traces.txt 1595,1604

** pthread mutex

通过查看相关source , 该mutex是linker中的全局mutex , 当我们调用dynamic
linker的相关接口 ( dlopen , dlclose , dlsym 等 ) 就需要acquire 该 mutex .

.code dlfcn.cpp 74,75

.code dlfcn.cpp 94,95

.code dlfcn.cpp 175,176

而且发现该锁在使用时 , 为了防止忘记释放的问题，它使用了c++的scope作用域 .
所以该锁在函数返回时都会被释放 .

再来看该mutex的定义 : 

.code dlfcn.cpp 32

需要注意的是该mutex是可以嵌套的 , 也就是说如果该mutex被某个thread拿着 ,
该thread可以再次acquire , 而不会产生dead lock.
那么这里的dead lock又是如何产生的呢 ?

没办法 , 只能从pthread mutex的代码上寻找线索 . 
经过阅读bionic的pthread mutex实现源码 , 在mutex的unlock
函数中有一点比较怀疑 : 

.code pthread_mutex.cpp 547,551

这里的意思是在释放锁之前会检查调用者是否是该锁的持有者 ,
如果不是的话返回permission deny . 那么会不会是这里的问题呢 ,
通过在这里添加log , 发现的确是这里的问题 .

.code pthread_mutex.cpp /START OMIT/,/END OMIT

可以看出这里调用者的tid为0 ??? 而该mutex的持有者的tid为1123.
从而导致该mutex释放失败 , 所以之后尝试拿该mutex都会被阻塞住 .

所以 , 下面的问题就是弄清为什么尝试释放mutex的线程的tid和当前mutex
持有者的tid不同 , 而且其tid明显是一个非法的值 ( 这里指0 ) .

** thread tid

首先我们来看tid是从哪里获得的:

.code pthread_mutex.cpp 548

而 `__get_thread()` : 

.code pthread_internals.cpp 55,57

原来tid是从保存在 `tls` 中的 `pthread_internal_t` 的tid成员中.
而 `pthread_internal_t` 初始化工作是在 `pthread_create` 最开始完成的 : 

.code pthread_create.cpp 147,159

.code pthread_create.cpp 53,57

当调用 `clone` 系统调用之后 , 系统会将创建出来的线程id写入到 `thread->tid` 中 : 

.code pthread_create.cpp 185

弄清楚了tid从哪里来之后 , 那我们再来看看 `pthread_internal_t` 的释放.
`pthread_internal_t` 的释放是在 `pthread_exit` 中 :

.code pthread_exit.cpp 61,71

.code pthread_internals.cpp 38,41

注意 , 这里只有被标记detached的thread才会被释放 ,
这类thread的退出不需要通知其父线程 ( 也就是创建该线程的线程 ) .
一般的线程退出之后都会通知其父线程 , 父线程一般通过 `pthread_join` 等待通知 , 
随后释放该线程的相关资源 . 

回忆之前我们提到过一个奇怪的线程也在等待mutex : 

.code traces.txt 1595,1604

可以看出它是在 `pthread_exit` 的过程中 ,
通过仔细分析其stack , 可以看出它其实是在执行 `pthread_exit` 最后的 `sigprocmask`
: 

.code pthread_exit.cpp 98,104

注意 , 这里 `pthread_internal_t` 已经被释放了, 所以这里获取的tid是非法的 , 
也就是 `use` `after` `freed` .
那么为什么没有导致segment fault呢 ? 这里和 `bionic` 的 `malloc/free` 实现有关 ,
bionic的内存管理使用的是jemalloc , 当一块memory被释放, 在一段时间内其仍然是可以
被访问的 , 只不过其内容是未知的 , 所以我们之前会看到tid为0这样的非法值 . 

为了验证这点 , 我写了一个简单的测试程序 :

.code test.cpp 1,25

使用gdb在释放 `pthread_internal_t` 之前将其tid改成一个特殊的值 : 

.code test.cpp 27,34

这里我们将其tid该写成999

之后我们在 `sigprocmask` 中查看已经释放的 `pthread_internal_t` : 

.code test.cpp 35,42

和我们预期的一样 , 被释放的 `pthread_internal_t` 仍然可以访问 ,
而且其内容还没有变!!!

* 结尾

至此 , 问题已分析清楚 , 可能的解决访问 , 可以修改 `sigprocmask` 的实现 . 
当然我也给android官方提了个[[https://code.google.com/p/android/issues/detail?id=222398][bug]].

FIN.
