Linux kernel i2c subsystem
09:00 24 Jan 2018
Tags: linux, kernel, i2c

* introduction

在linux kernel中i2c的设备驱动, 主要有下面几个软件抽象 :

- i2c_bus_type: 软件对i2c总线的抽象, 类型为 bus_type , kernel在初始化时会向设备驱动模型中注册该bus , 之后所有的i2c设备以及驱动都会被挂载在该总线下.
- i2c_driver: i2c驱动, 包括i2c控制器 , i2c主/从设备的驱动.
- i2c_adapter: i2c总线控制器.
- i2c_client: i2c从设备, 一般挂载在对应的总线控制器下面.

* i2c_bus_type

系统在初始化过程中 , 首先会注册i2c的bus:

.code corpus /c1s OMIT/,/c1e OMIT

首先我们来看下它的定义 :

.code corpus /c2s OMIT/,/c2e OMIT

由驱动模型可知 , 当总线上的驱动和设备是否匹配 , 会调用该总线的 `match` 的方法 :

.code corpus /c3s OMIT/,/c3e OMIT

可以看出 , 这里首先尝试通过dts进行匹配 , 如果匹配失败再尝试acpi方式 ,
最后才会进行 `id_table` 的方式.

如果匹配成功 , 下面就会进行probe :

.code corpus /c4s OMIT/,/c4e OMIT

这里主要是上电对应的i2c设备, 如果设备成功上电 , 则调用driver的probe方法

而remove和shutdown方法则都是对driver中相关方法的封装.

* i2c_driver

在i2c核心层有一个简单的dummy driver, 该驱动不会对对应的设备做任何操作 :

.code corpus /c5s OMIT/,/c5e OMIT

同时 , 这里还提供了helper function , 用户指定的i2c从设备地址 , 该设备会自动
匹配上述的dummy driver , 关于i2c从设备的创建后面会具体分析 .

.code corpus /c6s OMIT/,/c6e OMIT

* i2c_adapter

i2c_adapter是对i2c总线上控制器的抽象, 首先来看它的定义 :

.code corpus /c7s OMIT/,/c7e OMIT

这里省略了非关键字段, 

- algo, algo_data: 这里提供了i2c bus的操作函数，以及相关特性
- timeout, retries: 定义bus操作的超时时间和重试次数
- dev: i2c适配器同样也是i2c总线上的一个设备
- nr: 每个i2c适配器都有一个全局唯一的id , 其实你也可以把它认为i2c bus number , 只不过这里是软件层面上的

驱动程序一般会初始化好上述字段 , 之后便是将该adapter注册到kernel中 ,
主要的接口有 `i2c_add_numbered_adapter` 和 `i2c_add_adapter`
,两者的区别主要是是否使用设置的bus
number作为id还是让kernel动态生成一个未使用的id.

这两个接口最终都会调用 `i2c_register_adapter` ,
其中会向device driver model中注册该设备 :

.code corpus /c8s OMIT/,/c8e OMIT

可以看出 , 这里设置的设备名中包含了i2c总线号 , 
所以之后我们可以sys文件系统看到看到诸如 `i2c-0` , `i2c-1` 这样的设备目录 , 
这些设备就是i2c adapter .

同时 , 该设备所属的bus为之前注册的 `i2c_bus_type` ,
而设备类型 , 则是 `i2c_adapter_type` :

.code corpus /c9s OMIT/,/c9e OMIT

该设备类型有3个属性: name, new_device, delete_device.
其中的new_device和delete_device
主要用于通过用户空间向kernel添加和删除对应总线下的i2c设备

* i2c_client

i2c_client对应于位于某个i2c总线下的一个i2c从设备 , 首先来看它的定义 :

.code corpus /c10s OMIT/,/c10e OMIT

其中 , 

- flag: 用于表示该设备的一些特性 , 比如设备地址是10位还是7位 , 是否启动SCCB等
- addr: 该设备在总线上的地址
- name: 用户可以指定该i2c设备的名字
- adapter: 指向该设备所在总线的i2c控制器
- dev: 用于向device driver model中注册
- irq: 该设备产生中断的中断号

i2c从设备的添加 , 主要有以下三种方式 : 

- 驱动手动注册
- 在对应的总线下进行探测 , 从而进行动态注册
- 通过用户空间添加

** 驱动手动注册

这里主要通过 `i2c_new_device` 接口实现 :

.code corpus /c11s OMIT/,/c11e OMIT

可以看出这里的参数有两个 , 首先是对应的总线控制器 , 然后是 `i2c_board_info`
信息 : 

.code corpus /c12s OMIT/,/c12e OMIT

可以看出驱动程序可以指定对应设备的地址 , 中断号 , flag, type等等,
其中 , 这里的type其实就是设备的名字

在 `i2c_new_device` 函数中 , 首先会坚持该设备地址的合法性 ,
包括该地址是否正在被其他设备使用 , 之后便会向device driver model中注册该设备.

.code corpus /c13s OMIT/,/c13e OMIT

可以看出该设备所属的总线为 `i2c_bus_type` , 而且他的parent是对应的总线控制器,
同时它也有属于其自己的device type `i2c_client_type` , 用户和控制器设备做区分.

这里 , 让我们来看下该设备的命名 :

.code corpus /c14s OMIT/,/c14e OMIT

可以看出该设备的名称是 `总线号-设备地址`.

** 总线地址探测

这里驱动可以指定需要探测的地址列表, 其格式为:

.code corpus /c15s OMIT/,/c15e OMIT

之后调用 `i2c_new_probed_device` :

.code corpus /c16s OMIT/,/c16e OMIT

这样kernel会使用你提供的probe方法(会系统默认的探测方法 , 如果probe为NULL)
去探测指定的那些地址 , 如果发现其中一个地址上存在设备 ,
则使用该地址添加一个i2c从设备.

.code corpus /c17s OMIT/,/c17e OMIT

** 用户空间动态添加

用户空间可以通过向i2c总线控制器目录下的 `new_device`
文件写入信息来动态添加i2c设备,
写入的内容格式为: `设备名称` `设备地址\n` .

这样kernel就会根据对应的信息添加对应的从设备.

.code corpus /c18s OMIT/,/c18e OMIT

可以看出 , 如果设备添加成功 , 对应的控制器下会有一个对应的链表用于管理这些设备.

* i2c transfer

i2c总线上的数据是以包为单位 , kernel使用 `i2c_msg` 定义每个包 :

.code corpus /c19s OMIT/,/c19e OMIT

i2c系统主要有以下几个接口用于接受和发送数据包 :

- `__i2c_transfer`: 最低层接口 , 可用于任意个数的i2c数据包的读和写
- `i2c_transfer`: 对 `__i2c_transfer` 的封装 , 会使用adapter的lock进行串行化
- `i2c_master_send`: 用于i2c单个数据包的写操作 , 最终调用 `i2c_transfer` 进行传输
- `i2c_master_recv`: 用于i2c单个数据包的读操作 , 最终调用 `i2c_transfer` 进行传输

这里我们主要看一下 `__i2c_transfer` :

.code corpus /c20s OMIT/,/c20e OMIT

这里会尝试控制器指定的尝试次数 , 同时也会考虑操作是否超时 , 
而最终的操作会调用控制器的 `master_xfer` 方法.

这里的超时时间 , 如果在控制器注册时驱动没有指定 , 默认时间是1s.

.code corpus /c21s OMIT/,/c21e OMIT

当时 , 为了方便调试i2c数据的交互流程 , `__i2c_transfer` 中还提供了
event trace , 在实际调试过程中我们可以打开对应的event ,
其中包括 `i2c_read` , `i2c_write`, `i2c_reply`, `i2c_result`

下面是打开对应event trace开关看到的trace :

.code corpus /c22s OMIT/,/c22e OMIT

可以看到这里会把i2c的总线号 , 从设备地址 , 数据包的flag和内容, 
以及操作相应的结果都dump出来 , 这对于调试是很方便的.

FIN
