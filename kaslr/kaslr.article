Kernel address space layout randomization
14:20 13 Mar 2017
Tags: linux, kernel

* background

KASLR(Kernel address space layout randomization) 用于将kernel地址随机化 , 
这里 , 既包含物理地址也包含对应的虚拟地址 . 

* decompress kernel

kaslr 在解压kernel到内存之前会随机选择大小合适的物理地址 ,
下面我们就来看看这部分是如何实现的 . 

首先 , 我们需要将一些已知的物理地址空间过滤掉 ,
因为这些空间已经存放了内容 . 

这里 , 每个区域都是由如下的数据结构表示 : 

.code corpus /code_1_s OMIT/,/code_1_e OMIT

而已知的需要过滤的区域由如下几个 , 它们都保存在一个静态的全局变量中 : 

.code corpus /code_2_s OMIT/,/code_2_e OMIT

1. compressed kernel + decompress code所占用的空间 :
这里主要是用于解压kernel时所需的空间 . 

.code corpus /code_3_s OMIT/,/code_3_e OMIT

2. initrd

.code corpus /code_4_s OMIT/,/code_4_e OMIT

3. kernel command line

.code corpus /code_5_s OMIT/,/code_5_e OMIT

4. 启动相关信息 ( zero page )

.code corpus /code_6_s OMIT/,/code_6_e OMIT

下面就是找出所有符合大小的可用的物理地址空间 ,
这里主要是遍历bios提供物理内存表 ( e820 ) . 

.code corpus /code_7_s OMIT/,/code_7_e OMIT

对于每个e820表项 , 首先判断其是否为可用内存 : 

.code corpus /code_8_s OMIT/,/code_8_e OMIT

接着 , 如果是32位kernel， 最多只能将kernel放置在512M以下的空间
所以需要判断该表项的其实地址是否大于512M : 

.code corpus /code_9_s OMIT/,/code_9_e OMIT

其次 , 判断该区域小于指定的起始地址 : 

.code corpus /code_10_s OMIT/,/code_10_e OMIT

通过了这些检查 , 那么该区域可能满足条件 . 
下面还需要对其起始地址做对其 , 并重新计算该区域的大小 : 

.code corpus /code_11_s OMIT/,/code_11_e OMIT

如果该区域足够容纳我们所需的大小 , 下一步便是检查
该区域是否和我们之前定义的需要过滤的空间有重叠 ,
如果没有重叠 , 那么该区域便成为候选之一 : 

.code corpus /code_12_s OMIT/,/code_12_e OMIT

反之 , 如果有重叠 , 但是在重叠区域之前由足够的空间 , 
这里同样将该区域记录下来 : 

.code corpus /code_13_s OMIT/,/code_13_e OMIT

否则 , 从该区域中去除重叠的部分 , 调整区域的起始地址和大小 ,
然后进行下一次的比较 : 

.code corpus /code_14_s OMIT/,/code_14_e OMIT

最终 , 所有的候选区域都被保存在全局 : 

.code corpus /code_15_s OMIT/,/code_15_e OMIT

这里 , 每个区域处理会保存该区域的起始地址 , 
同时还保存了该区域可以容纳的镜像的个数 . 

最后 , 我们就需要从这些候选区域中随机选择一个 : 

.code corpus /code_16_s OMIT/,/code_16_e OMIT

* identity map

从 [[/posts/Linux_kernel_boot_process_-_part_2][之前分析x86_64启动过程]]
可知，在进入保护模式之后我们只映射了0到4G的地址空间,
那么, 我们这里随机选择的地址可能还没有映射 ,
所以 , 这里还需要建立对应的页表 , 是decompress code可以访问这些内存地址 . 

这里 , 会建立1对1的映射 ，而建立页表的过程会依次遍历pgd , pud , pmd
如果对应的页表项不存在 , 会重新创建一个 , 并插入到对应的表项中 : 

.code corpus /code_17_s OMIT/,/code_17_e OMIT

那么 , 这些页表项是存放在哪的呢 ? 我们可以从页表分配函数中看出端倪 : 

.code corpus /code_18_s OMIT/,/code_18_e OMIT

可见 , 这些页表项在内存中是连续存放的 ,
下面是相关成员的初始化的值 : 

.code corpus /code_19_s OMIT/,/code_19_e OMIT

这里 , 会判断我们是来自于64位的bootloader还是32位的 , 
如果是32位的话 , 我们已经建立的0-4G的空间对应的页表项, 所以这里需要保留这些页表项 , 
如果是64位的话 , 我们需要重新建立所有的页表项 . 

.code corpus /code_20_s OMIT/,/code_20_e OMIT

* kernel virtual mapping randomization

除了对kernel image的物理地址的随机化 , kaslr同时还可以对kernel virtual
address的随机化 . 

这里主要对三块区域进行随机化 : 

1. kernel virtual address

2. vmalloc

3. vmemmap

.code corpus /code_21_s OMIT/,/code_21_e OMIT

每个区域都会随机出一个偏移量加到其默认的初始值上 : 

.code corpus /code_22_s OMIT/,/code_22_e OMIT

FIN.
