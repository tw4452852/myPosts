Linux kernel boot process - part 3
16:33 1 Mar 2017
Tags: linux, kernel

* background

[[/posts/Linux_kernel_boot_process_-_part_2][上一篇]]
我们已经将compressed kernel解压到了指定位置 , 
下面我们就接着来看看uncompressed kernel的启动过程 . 

* checking

首先是初始化stack , 并查看cpu是否支持64位 : 

.code corpus /uncompressed_1_s OMIT/,/uncompressed_1_e OMIT

其实 , 在之前我们已经验证过cpu是否支持64位 , 
这里再次检查是因为有可能我们是通过64位的bootloader跳转到这里 , 
从这段代码的上面的comment , 我们也可以得到验证 : 

.code corpus /uncompressed_2_s OMIT/,/uncompressed_2_e OMIT

接着计算当前位置和编译时的位置之间的差值 : 

.code corpus /uncompressed_3_s OMIT/,/uncompressed_3_e OMIT

而编译时的位置可以从 `arch/x86/kernel/vmlinux.lds` 中得到 : 

.code corpus /uncompressed_4_s OMIT/,/uncompressed_4_e OMIT

所以 , 这里的差值为0 (0x1000000 - (0xffffffff80000000 + 0x1000000 -
0xffffffff80000000)).

接着 , 检查地址的合法性 , 包括是否2M对其 , 是否超过64位cpu支持的最大地址 : 

.code corpus /uncompressed_5_s OMIT/,/uncompressed_5_e OMIT

* early page mapping

从 `arch/x86/kernel/vmlinux.lds` 可以看出编译时的线性地址从 `0xffffffff80000000`
开始 , 而真实的物理地址却是从0开始 , 
所以 ，这里需要建立页表将其映射起来 . 

下面我们就来看看这部分页表的结构 , 
由于我们采用的4级页表的结构 , 首先需要计算出该线性地址在pgdt中的位置 : 

(0xffffffff80000000 >> 39) & 511 = 511

其次是在pudt中的位置 : 

(0xffffffff80000000 >> 30) & 511 = 510

接着是在pmdt中的位置 : 

(0xffffffff80000000 >> 21) & 511 = 0

清楚了这些位置 ，下面就是对应的页表初始化 : 

.code corpus /uncompressed_6_s OMIT/,/uncompressed_6_e OMIT

可以看出这里将虚拟地址空间 ( 0xffffffff80000000 ~ 0xffffffff80000000+512M )
映射到物理地址空间 ( 0 ~ 512M ) .

由于该页表目录结构是在编译时初始化的 ,
所以这里还需要将其地址调整为实际运行的地址 , 
这里 , 只需要加上之前计算出的差值即可 : 

.code corpus /uncompressed_7_s OMIT/,/uncompressed_7_e OMIT

除了建立上述的地址映射 , kernel还建立一个对等映射 , 
即线性地址对应和其相同的物理地址 :

.code corpus /uncompressed_8_s OMIT/,/uncompressed_8_e OMIT

可以看出这里将虚拟地址空间 (_text(0x1000000) ~ _end) 映射到对等的物理地址空间 . 

之后 , 根据kernel是否被relocation , 对页表中的地址做调整 : 

.code corpus /uncompressed_9_s OMIT/,/uncompressed_9_e OMIT

最终 , 物理地址和虚拟地址的对应关系如下 : 

.code corpus /mm_s OMIT/,/mm_e OMIT

之后打开pae和pge , 并加载新的页表 : 

.code corpus /uncompressed_10_s OMIT/,/uncompressed_10_e OMIT

这样 , 我们就能调转到编译时指定的虚拟地址 : 

.code corpus /uncompressed_11_s OMIT/,/uncompressed_11_e OMIT

之后 , kernel会重新设置cr0 , 初始化stack和各个段寄存器 . 
最终， 跳入到c代码 `x86_64_start_kernel` : 

.code corpus /uncompressed_12_s OMIT/,/uncompressed_12_e OMIT

FIN.
